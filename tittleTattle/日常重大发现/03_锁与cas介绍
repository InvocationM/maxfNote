在多线程与高并发的编程中，核心问题就在于临界区的安全访问。
通常是用加锁来解决这个问题的，加锁本质上是将并发转变为串行来实现的，势必会影响吞吐量。
对于并发控制而言，加锁是一种悲观策略，会阻塞线程的执行。而无锁则是乐观策略，它会假设对资源的方位没有冲突，既然没有冲突就不需要
等待，线程就不用阻塞。
那多个线程共同访问临界区的资源怎么办呢，无锁的策略采用一种比较交换技术CAS（compare and swap）来鉴别线程冲突，
一旦检测到冲突，就重试当前操作直到没有冲突为止。

cas简单点说就是：预期的值，待修改的值，更新后的值。  所有的线程带着一个预期的值同时发起请求，和待修改的值进行比较，
假如相同则进行修改，不同则不断的重试。

。  与悲观锁对应的是乐观锁，乐观锁在处理某些场景的时候有更好的表现，所谓乐观锁就是认为在并发场景下大部分时候都不会产生冲突，
因此每次读写数据读不加锁而是假设没有冲突去完成某项操作，如果因为冲突失败就重试，直到成功为止。乐观锁用到的机制就是CAS。

cas锁的三个问题：
aba问题
循环时间长开销大
只能保证一个共享变量的原子操作。