任何情况下，对环境的理解越透彻越深，越不容易出问题，对东西的掌控力越强。

直接老代码加功能，功能完成后，给测试搭建测试环境，得熟悉完成的功能，还要熟悉这个功能点在什么情况下才会被触发。
功能：动态更新t_rca_hunter_info表
这个得是触发了 加减分规则的时候，才会进行动态的更新或者插入操作。

引擎配置的 枚举非数字类型的bug，最后解决的方案是 这种类型的配置，每一处都要加上一个小括号。
思考： 还是对环境的理解不到位。 不应该沉溺于复杂的源码，而是能够理解清楚空间属性的bug的环境因素的影响。

jdk常用的方法是环境，框架也是环境，不同的版本是环境，执行的条件是环境，甚至入参也是环境。
环境有大有小，当你对环境的理解很深入的时候，那么调任何bug或者写代码都是信手拈来的事情。

自己做设计，写代码， 搭建框架，组合功能，，等等都是在自定义环境。