索引是帮助mysql高效获取数据的排好序的数据结构
索引存储在文件中的。

二叉树：每个节点最多两个子树的树结构。节点是有顺序的。（而b树可以有多个子树）
    缺点： 自增的主键作为索引的时候，生成的索引二叉树，都是添加在根节点的右子节点上面，和顺序数组的存储形式一样，性能没有任何提升。
红黑树（平衡二叉树）：会主动的对树进行调整，并且始终保证 左子节点< 父节点 < 右子节点
    缺点： 如果数据量过大，就会发生树的层数过深，不利于磁盘寻址，依然会用很多时间查找。

B-Tree：在红黑树基础上面拓展出来的一种数据结构。既然红黑树会发生树层数过深，那么只要适当的增加每个树节点能存储的数据个数。
    B-Tree的每个节点都是存储的 key和value
    缺点： 假如待查询的数据，刚好的节点的最后面，那么前面遍历过的节点存储的数据对我们来说是无用的，它会占用比索引多得多的空间，
    导致我们在一个大节点里面能遍历的数据大大的减少。

B+Tree（mysql，InnoDb引擎的索引的底层原理）: 在B-Tree的基础上，   只在最底层的叶子节点上才存储数据。（在上层的非叶子节点会保存部分冗余数据，但是只是索引，也不会对内存造成多少负担）
    每个叶子节点都指向下一个叶子节点。


联合索引的底层存储结构：
单列索引，其实可以可以看索引值为1的联合索引。
每个树节点中包含多个节点值，就叫做联合索引。
在通过索引值查找时候，对索引值进行依次的匹配。直到找到所有索引值都符合的树节点。

mysql的Innodb的主键是聚集索引。 主键的作用就是把表的格式转换为平衡树的格式在磁盘中放置。 聚集索引（主键）是通向磁盘上真实数据的唯一路径。
聚集索引：数据行的物理顺序，与数据值的逻辑顺序相同，一个表中只能有一个聚集索引。

非聚集索引：该索引的逻辑顺序与磁盘空间中的物理顺序不同，一个表可以有多个非聚集索引。
每个非聚集索引是独立的，完全没有关系。

1，通过非聚集索引查找聚集索引。
2，通过聚集索引查找真实数据。
3，真实数据中得到数据，返回。

ps，复合索引。 在需要被查询到的多个字段上面，用多个字段创建一个复合索引。可以直接查询出来结果，不需要走聚集索引。直接复合索引的索引文件就能查询出结果。




