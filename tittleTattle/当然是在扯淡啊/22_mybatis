1，整体架构的模块分析
分为三大模块，
a,接口层（主要包括SQLsession自带的某些方法，和mapper接口中定义的方法。StatementId为唯一标识）。
b,数据处理层。主要是 封装参数动态生成sql，执行，封装结果
c,基本支撑层。事务管理器，缓存，连接池等等。


2，主体流程和主要的类
核心逻辑是Executer.
先通过mapper接口进来，然后statement处理器，参数处理器paramsHandler，ResultSetHandler处理器，typeHandler，

加载入口类： SqlSessionFactoryBuilder, 主要是两类方式：通过字符流Reade加载， 和InputStream字节流加载。


3，常见的细节或者坑
多级缓存。

1,几个handler怎么工作的？
请求参数封装，返回结果封装，类型封装等。

重要类的笔记：
ClassLoaderWrapper： 类加载器的包装类，主要两个方法，用来返回 URL 和InputStream
Resource： 调用ClassLoaderWrapper的方法，来返回InputStream，URL，Properties，File，Reader等。


解析xml或者注解。
添加属性到Configration
1, 读取xml。  将输入流作为构造器参数，传递给XPathParser的构造器。得到node解析器，然后直接用解析中拿到node节点。
构造了一个XpathParser解析器。使用dom解析的方式，读取字节流，转化为


解决的核心问题并不是很复杂， 而框架为什么会变的复杂？ 因为加多了安全效率优化方面的思考。

mybatis源码学习: 按功能模块分析
自己实现功能模块，然后对照源码它做了哪些方面的改进提升和思考。

1，日志模块
对常见的日志框架进行封装。
日志分级warn trace debug  error，打印。
log工厂方法，静态方法，按照顺序对不同的log实现进行加载。 直到log构造器对象不为null，然后用这个加载log对象。
加载一个日志jar包后，就会将configration的日志属性设置为那个jar包。
对主流的日志框架，类名写死，然后使用中间包传入的参数，进行类的加载。 并且封装了一层自己的log类。这样就可以统一调用自己的类。

做了哪些额外的？ 哪些额外的考虑？



2, sqlsession  做了啥 内部原理  实现细节

数据处理的几个主要的类：
解析字符串，执行，封装结果。
crud的17种方法，执行语句，参数，分页参数等。
主要功能，额外的考虑：参数类型是否是list的包装标记。
ParameterMapping: 参数映射封装
ResultMapping: 结果映射封装
BoundSql: sql语句的映射封装
MappedStatement: sql一句的映射
SimpleExecuter: 简单的执行器，普通jdbc的封装
SimpleStatementHandler: 语句处理器


情景: ， 有default值的字段，insert语句时，对此字段不给值，数据库就会默认给default值，给null的话，会是null





