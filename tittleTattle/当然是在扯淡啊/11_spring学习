1, 什么是ioc容器？

2，spring对标签的解析？
3，bean的加载
4，容器功能的拓展

第五章  bean的加载
    BeanDefinition: 接口，设置各种bean属性，字段属性，和FactoryBean属性

    BeanFacotry接口：getBean()方法，是否包含bean，是否单例，是否多例，类型是否匹配，得到类型，得到别名数组。
    AbstractBeanFactory：getBean方法等的实现。



第六章 ApplicationContext的加载

--------------------
spring中的设计模式：
简单工厂模式：根据传来的参数，调用不用的代码（代码中实质上使用if判断）。
工厂方法模式：给出若干个工厂类，然后new 其中的某个，然后调用某个 名字相同的方法。
抽象工厂模式：提供一个创建 一系列相关或相互依赖的接口。 和简单工厂模式结合起来，可以做到 依赖注入。


aop：Aspect oriented Programming 面向切面编程
    非侵入性的对源代码进行'增强'。

    最简单的实现，自定义一个类，其中有一个method方法。然后直接在main方法中，调用这个方法，在前面后面手动的写'增强方法'。
    思考? 如何抽象出更适合的代码。
    将业务抽象为三个主体类： 一是：被代理对象  二是：MehotdInteceptor  三是： MethodInvocation  （其中有类似与AopProxy的标记接口）

tiny-spring: 1，定义bean 2，创建bean工厂 3，bean注入属性  4，bean注入bean属性 5，xml解析bean  6，applicationContext 7，aop 8，Aspect实现 9，aop融入bean创建 10，CGlib织入


1,Aware接口：bean对象实现了Aware接口，会在BeanFactory产生bean对象的时候根据其实现的Aware接口，给bean注入相应的信息，从而让bean获取外界的信息。
业务按特定的需要实现Aware接口，spring容器会主动找到该bean，然后调用特定的方法，将特定的参数传递给bean。
顶级Aware接口是空接口，而BeanNameAware接口，有一个setBeanName的方法。
2,强制要求某些环境变量：继承AbstractAplicationContext类，重写initPropertySource方法，在此方法中执行AbstractPropertyResolver的validateRequiredProperties方法。
3，广播与监听：三个对象主题：发布事件，广播发送者，监听器。
广播发送者继承了Aware接口，可以在调用特定的方法setApplicationEventPublisher。
监听器是怎么保证一定会调用到onApplicationEvent方法的。只要当前的bean实现了ApplicationContextListener接口，就会在创建的时候，将当前bean注册到监听器的集合中，然后后面的广播会遍历调用方法。




