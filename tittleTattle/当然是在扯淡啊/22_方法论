工程思维的升维？
1，怎么使用，用到哪些特性
2，内部工作原理是什么
3，有什么优化方案吗？
4，指标量化

怎么提升技术?
1，研究一个需要几个月的东西
2，每个月都来一个当月计划，邮件发给自己

怎么客观考察水平?
1，基础知识。
2，架构经验。
3，业务方面的能力。

新技术学习三段法：
1，熟悉内部工作原理   2，弄懂原理  3，优化

什么是工程思维：
具有科学理论支撑的，完整体系的思维方式。

海尔迈耶系列问题：
1，你学这项技术的目标是什么？ 清晰的表达出来
2，这项技术是怎么做的？有什么局限吗？
3，这项技术有什么创新之处？为什么它能取得成功？要是在项目中引入这项技术，谁会关心？
4，如果这项技术成功，他会来带什么变化？
5，采用这项技术的成本，风险和收益比如何？你需要花费多少资源（时间金钱）？如果去评估它的效果？

引入一个新东西：
1，弄懂该工具的实现原理和机制并清晰的描述出来。
2，对该工具进行效果测试。
3，进行基准性能测试，以确定符合预期的标准。

关于bug的空间属性和时间属性：
程序编写的时候，对环境的思考！！！！！！！！！！！！！！！！！
程序将存在问题的环境当作正常环境进行处理，从而产生异常。

总结一下：空间即环境。有程序运行和依赖两种环境，环境是多维度，多层次的，对环境的理解越全面，越深入，出现空间类bug的概率就越低；
对环境的掌控有深度和广度两个方向，若单独出现，相对有形（异常现场容易捕捉）；如果加上时间属性，就变得微妙多了。

既然锁定了怀疑领域，接下来就应该证据来证明，并给出合理的解释。
假设阶段后面，必须量化验证这个推测。


 系统的核心实现往往并不难，而加上了安全，效率方面的考虑会让它变得复杂。

 在时间“基石”习惯之上构建的习惯应该是你能力范围之外的。如果一项行动通过习惯慢慢变成了能力范围之内的事情，那么你以后再去做类似的事情，其实就不需要
 再付出什么决策努力了，就不再需要习惯帮忙了。
 高度专注，跨出边界，持续交付。

 从开始聚焦某个业务点和技术栈，逐步延申扩展到整个面。

 源代码-- 应用编程接口--技术规范--指南

 技能是你懂得某个技术，而能力就是你运用工具思考和行为方式，它是你做成一件事并取得成功的品质。

 技术需要懂得是产品提供的核心服务与流程，并清晰的将其映射到技术的支撑能力和成本上。

 普通劳动者被动接受指令行动，而专业人士则是自己生成指令，同时还会向同事或上级提供来自该领域的输出：专业建议。

 别忽视传递成本。


