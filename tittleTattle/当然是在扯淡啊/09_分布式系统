    开始，所有的代码都是维护在一个工程中的，这样，修改，测试，耦合度较高，新版本发布的成本较大，随着团队人员的越来越多，业务的越来越复杂。
    共同维护一个工程中的一份代码，修改了某个模块的部分代码，就必须回归测试，全部测试一遍。所以这个时候就得想办法把系统改为分布式系统了。

    - 分布式系统的出现
    这个时候将一个庞大的系统，拆分为若干个子系统，每个子系统独立的进行开发维护。这样，系统内部的耦合性降低。能极大的提升开发效率。

    -分布式系统带来的问题
    子系统之间的通信（分布式服务框架）：常见的用spring cloud 或者dubbo

    分布式事务： 一旦一个系统拆分为多个系统后，怎么保证跨多个系统的事务？ （需要了解tcc，最终一致性，2pc等分布式事务。）

    子系统之间的共享缓存： 分布式缓存系统，一般用redis

    子系统之间的锁（分布式锁）：假如多个系统一个共享一个资源，并且要保证线程安全，需要对这个资源进行加锁，此时多个系统不在一个jvm中，仅仅synchronized并不能够解决问题。

    子系统之间的任务队列：原来的单个系统，任务队列用一个linkedlist就行了。多个系统进行任务队列的生产消费，得用到分布式的中间件系统。

    分布式配置中心,分布式的日志系统，分布式会话，分布式监控告警中心

    -----------------------------
    基于消息中间件的最终一致性方案：
    本质上是：在业务实现幂等性的前提下，依靠消息的可靠性和消息的重试机制达到最终一致性的目的。